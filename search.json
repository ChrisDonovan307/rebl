[{"path":"https://chrisdonovan307.github.io/rebl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rebl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/articles/model-validation.html","id":"person-fit","dir":"Articles","previous_headings":"Person and Item Fit","what":"Person Fit","title":"Model Validation","text":"Use get_person_fits function either CML MML models. eRm model: TODO: Interpretation thing ltm models: , L0L_0 Levine Rubin (1979) test statistic, LzL_z standardized version (Drasgow et al., 1985), pp test person fit null hypothesis good fit.","code":"person_fits <- get_person_fits(model_cml) head(person_fits) #>   id    p.fit p.df p.outfitMSQ p.infitMSQ  p.outfitZ   p.infitZ #> 1 p1 26.25577   24   1.0939906  1.0820874  1.1567754  1.0703092 #> 2 p2 21.71436   24   0.9047649  0.9092663 -1.1926572 -1.1981892 #> 3 p3 25.16591   24   1.0485795  1.0443576  0.6855344  0.6581565 #> 4 p4 20.21121   24   0.8421338  0.8573618 -1.5843117 -1.5596026 #> 5 p5 20.72360   24   0.8634835  0.8707686 -1.3609121 -1.3812978 #> 6 p6 27.76184   24   1.1567434  1.1295124  0.9355978  0.8631123 person_fits <- get_person_fits(model_con) #> Warning: There was 1 warning in `dplyr::arrange()`. #> ℹ In argument: `..1 = as.numeric(id)`. #> Caused by warning: #> ! NAs introduced by coercion head(person_fits) #>    id        L0          Lz          p #> 1 p77 -17.56102 -1.49687625 0.06721273 #> 2 p37 -15.66684  0.50445151 0.69302794 #> 3 p45 -14.78634  0.25237416 0.59962406 #> 4 p90 -15.05879  0.42184543 0.66343108 #> 5 p79 -15.86456  0.07596912 0.53027817 #> 6 p85 -14.14752  2.37984952 0.99134015"},{"path":"https://chrisdonovan307.github.io/rebl/articles/model-validation.html","id":"item-fit","dir":"Articles","previous_headings":"Person and Item Fit","what":"Item Fit","title":"Model Validation","text":"Note item fit function works CML models currently. coming soon.","code":"fits <- get_item_fits(   model = model_cml,   df = example,   rebl_items = rebl_items ) fits %>%    reactable::reactable(     resizable = TRUE,     filterable = TRUE,     searchable = TRUE,     outlined = TRUE,     bordered = TRUE,     striped = TRUE,     compact = TRUE,     defaultColDef = colDef(format = colFormat(digits = 3)),     columns = list(       i.df = colDef(format = colFormat(digits = 0))     )   )"},{"path":"https://chrisdonovan307.github.io/rebl/articles/rasch-modeling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Rasch Modeling","text":"Something REBL PEBs Rasch models. Install load rebl package friends:","code":"library(rebl) pacman::p_load(   dplyr,    ggplot2,   ltm,   eRm ) #> Installing package into '/home/runner/.cache/R/renv/library/rebl-6007be1a/linux-ubuntu-noble/R-4.5/x86_64-pc-linux-gnu' #> (as 'lib' is unspecified) #> also installing the dependencies 'farver', 'labeling', 'RColorBrewer', 'viridisLite', 'gtable', 'isoband', 'S7', 'scales' #>  #> ggplot2 installed"},{"path":"https://chrisdonovan307.github.io/rebl/articles/rasch-modeling.html","id":"recoding","dir":"Articles","previous_headings":"","what":"Recoding","title":"Rasch Modeling","text":"Take look randomly generated data example: respondent_id column 24 REBL items data frame. mighty convenient character vector REBL items. already , grand. Otherwise, let’s tell rebl items . can regex pattern. , just identifying column start “res”. items start “rebl”, regex pattern ^rebl*. Next, event data REBL items yes/format, convert 1/0: Now recode reverse-coded REBL items. items /0 pro-environmental behavior. start making vector items regex pattern. use example items start “food”. (silly confusing though - change ). recode items. Reverse code new vector items:","code":"head(raw_example[, 1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1       Yes              No      Yes          No       No #> 2            p2       Yes              No       No          No       No #> 3            p3        No             Yes      Yes          No      Yes #> 4            p4       Yes             Yes       No         Yes      Yes #> 5            p5       Yes             Yes       No         Yes      Yes #> 6            p6        No              No      Yes         Yes      Yes rebl_items <- id_rebl_items(   df = raw_example,    pattern = '^(?!res).*',    perl = TRUE ) print(rebl_items[1:6]) #> [1] \"foodLocal\"       \"foodLunchNoMeat\" \"foodMeat\"        \"foodOatMilk\"     #> [5] \"foodTofu\"        \"foodVegan\" df <- recode_rebl(   df = raw_example,    rebl_items = rebl_items ) head(raw_example[, 1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1       Yes              No      Yes          No       No #> 2            p2       Yes              No       No          No       No #> 3            p3        No             Yes      Yes          No      Yes #> 4            p4       Yes             Yes       No         Yes      Yes #> 5            p5       Yes             Yes       No         Yes      Yes #> 6            p6        No              No      Yes         Yes      Yes reversed_items <- id_reversed_rebl_items(rebl_items, '^food') head(reversed_items) #> [1] \"foodLocal\"       \"foodLunchNoMeat\" \"foodMeat\"        \"foodOatMilk\"     #> [5] \"foodTofu\"        \"foodVegan\" df <- reverse_code_rebl_items(df, reversed_items) head(df[,1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1         0               1        0           1        1 #> 2            p2         0               1        1           1        1 #> 3            p3         1               0        0           1        0 #> 4            p4         0               0        1           0        0 #> 5            p5         0               0        1           0        0 #> 6            p6         1               1        0           0        0"},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/articles/rasch-modeling.html","id":"cml","dir":"Articles","previous_headings":"Rasch Models","what":"CML","title":"Rasch Modeling","text":"Now ’re ready run Rasch model get REBL scores. Rasch model dichotomous items eRm package (Mair, Wien, Hatzinger 2007) estimates probability PP person vv endorse item ii : P(Xvi=1)=exp(θv−βi)1+exp(θv−βi),  P(X_{vi}=1)=\\frac{exp(\\theta_v-\\beta_i)}{1+exp(\\theta_v-\\beta_i)}, θ\\theta latent parameter person ability (REBL score) β\\beta latent parameter item difficulty. calculate θ\\theta just give function data frame, name column respondent id, vector REBL items: , coefficients represent item difficulty parameters. Note discrimination every item set 1. TODO: Interpretation","code":"model_cml <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'cml' )"},{"path":"https://chrisdonovan307.github.io/rebl/articles/rasch-modeling.html","id":"mml","dir":"Articles","previous_headings":"Rasch Models","what":"MML","title":"Rasch Modeling","text":"can also run set Marginal Maximum Likelihood (MML) models using ltm package (Rizopoulos 2006). Parameters estimated maximizing log-likelihoods observed data. model implemented ltm parameterizing mmth sample unit : ℓm(θ)=log∫p(xm|zm;θ)p(zm)dzm, \\ell_{m} (\\theta)=\\log\\int p(x_{m}|z_{m};\\theta)p(z_{m})dz_{m}, function observed response vectors xmx_m, rank respondent latent trait values zmz_m, distribution person abilities dzmdz_m. First try constrained Rasch model, item discrimination constrained equal 1: TODO: Interpretation can also run MML unconstrained, item discrimination set equal can vary one: two parameter logistic model estimates item difficulty discrimination: Finally, can use three parameter logistic model also estimates latent variable guessing:","code":"model_con <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_con' ) summary(model_con) #>  #> Call: #> ltm::rasch(data = df, constraint = cbind(length(df) + 1, 1)) #>  #> Model Summary: #>    log.Lik      AIC      BIC #>  -1677.112 3402.225 3464.749 #>  #> Coefficients: #>                                     value std.err  z.vals #> Dffclt.foodLocal                  -0.0004  0.2286 -0.0015 #> Dffclt.foodLunchNoMeat             0.0845  0.2287  0.3693 #> Dffclt.foodMeat                   -1.0011  0.2490 -4.0200 #> Dffclt.foodOatMilk                -0.3430  0.2309 -1.4856 #> Dffclt.foodTofu                   -0.3433  0.2309 -1.4866 #> Dffclt.foodVegan                  -0.5203  0.2340 -2.2239 #> Dffclt.homeClothesCold            -0.5656  0.2350 -2.4070 #> Dffclt.homeClothesHang             0.5646  0.2349  2.4033 #> Dffclt.homeLightsOff              -0.2999  0.2304 -1.3019 #> Dffclt.packCarriedUtensils         0.2992  0.2303  1.2989 #> Dffclt.packCompost                 0.5195  0.2339  2.2206 #> Dffclt.packContainerToRestaurant   0.4741  0.2330  2.0345 #> Dffclt.packPickedUpLitter          0.0847  0.2287  0.3705 #> Dffclt.packPullRecycleFromTrash    0.6567  0.2372  2.7684 #> Dffclt.packRags                   -0.2999  0.2304 -1.3019 #> Dffclt.packReusableMug             0.2558  0.2299  1.1128 #> Dffclt.packReusedPaperPlasticBags -0.4756  0.2331 -2.0407 #> Dffclt.purchBuyNothing             0.6111  0.2360  2.5890 #> Dffclt.socialDocumentary           0.1703  0.2291  0.7434 #> Dffclt.socialGroup                -0.0001  0.2286 -0.0003 #> Dffclt.socialRead                  0.0848  0.2287  0.3707 #> Dffclt.socialSupportive            0.3861  0.2315  1.6676 #> Dffclt.waterShowerStop             0.1696  0.2291  0.7403 #> Dffclt.waterTeethStop             -0.0430  0.2286 -0.1880 #> Dscrmn                             1.0000      NA      NA #>  #> Integration: #> method: Gauss-Hermite #> quadrature points: 21  #>  #> Optimization: #> Convergence: 0  #> max(|grad|): 0.015  #> quasi-Newton: BFGS model_uncon <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_uncon' ) #> Warning in ltm::rasch(df): Hessian matrix at convergence is not positive definite; unstable solution. summary(model_uncon) #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(diag(new.covar)): NaNs produced #> Warning in sqrt(Var[n.ind + 1, n.ind + 1]): NaNs produced #>  #> Call: #> ltm::rasch(data = df) #>  #> Model Summary: #>    log.Lik      AIC      BIC #>  -1619.453 3288.906 3354.035 #>  #> Coefficients: #>                                     value std.err  z.vals #> Dffclt.foodLocal                  -0.0212  1.7450 -0.0121 #> Dffclt.foodLunchNoMeat             0.6815  1.6834  0.4048 #> Dffclt.foodMeat                   -8.1682     NaN     NaN #> Dffclt.foodOatMilk                -2.8016     NaN     NaN #> Dffclt.foodTofu                   -2.8145     NaN     NaN #> Dffclt.foodVegan                  -4.2712     NaN     NaN #> Dffclt.homeClothesCold            -4.6090     NaN     NaN #> Dffclt.homeClothesHang             4.6651     NaN     NaN #> Dffclt.homeLightsOff              -2.4593  0.5408 -4.5476 #> Dffclt.packCarriedUtensils         2.4104  0.6331  3.8070 #> Dffclt.packCompost                 4.2683     NaN     NaN #> Dffclt.packContainerToRestaurant   3.9521     NaN     NaN #> Dffclt.packPickedUpLitter          0.6709  1.6854  0.3981 #> Dffclt.packPullRecycleFromTrash    5.5774     NaN     NaN #> Dffclt.packRags                   -2.4529  0.5539 -4.4281 #> Dffclt.packReusableMug             2.0833  1.0343  2.0141 #> Dffclt.packReusedPaperPlasticBags -3.8862     NaN     NaN #> Dffclt.purchBuyNothing             5.0703     NaN     NaN #> Dffclt.socialDocumentary           1.3689  1.4807  0.9245 #> Dffclt.socialGroup                -0.0121  1.7451 -0.0069 #> Dffclt.socialRead                  0.6616  1.6871  0.3921 #> Dffclt.socialSupportive            3.1358     NaN     NaN #> Dffclt.waterShowerStop             1.3800  1.4760  0.9349 #> Dffclt.waterTeethStop             -0.3715  1.7270 -0.2151 #> Dscrmn                             0.1150     NaN     NaN #>  #> Integration: #> method: Gauss-Hermite #> quadrature points: 21  #>  #> Optimization: #> Convergence: 0  #> max(|grad|): 14  #> quasi-Newton: BFGS model_2pl <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_2pl' ) summary(model_2pl) #>  #> Call: #> ltm::ltm(formula = df ~ z1) #>  #> Model Summary: #>    log.Lik      AIC      BIC #>  -1597.748 3291.496 3416.544 #>  #> Coefficients: #>                                     value  std.err  z.vals #> Dffclt.foodLocal                   0.0087   0.2947  0.0295 #> Dffclt.foodLunchNoMeat            -0.3427   0.9586 -0.3576 #> Dffclt.foodMeat                    6.4927  12.7729  0.5083 #> Dffclt.foodOatMilk                 0.5365   0.4334  1.2381 #> Dffclt.foodTofu                    5.2548  21.9639  0.2392 #> Dffclt.foodVegan                   3.4867   6.5661  0.5310 #> Dffclt.homeClothesCold             1.3828   1.1448  1.2079 #> Dffclt.homeClothesHang             9.5786  44.3396  0.2160 #> Dffclt.homeLightsOff               2.5122   6.0374  0.4161 #> Dffclt.packCarriedUtensils         0.1041   0.4619  0.2254 #> Dffclt.packCompost                 3.3601   6.2429  0.5382 #> Dffclt.packContainerToRestaurant  18.2373 192.9655  0.0945 #> Dffclt.packPickedUpLitter         -1.3615   6.7373 -0.2021 #> Dffclt.packPullRecycleFromTrash   -0.9822   0.6374 -1.5409 #> Dffclt.packRags                    5.5813  28.3185  0.1971 #> Dffclt.packReusableMug            -1.9445   4.2870 -0.4536 #> Dffclt.packReusedPaperPlasticBags  0.8175   0.5874  1.3916 #> Dffclt.purchBuyNothing             2.7832   3.7403  0.7441 #> Dffclt.socialDocumentary          -0.3525   0.5046 -0.6986 #> Dffclt.socialGroup                 0.0082   1.6695  0.0049 #> Dffclt.socialRead                 -0.1480   0.4009 -0.3692 #> Dffclt.socialSupportive            1.7074   2.3756  0.7187 #> Dffclt.waterShowerStop            -1.9530   6.5161 -0.2997 #> Dffclt.waterTeethStop              0.8623   6.3557  0.1357 #> Dscrmn.foodLocal                   0.7743   0.3128  2.4750 #> Dscrmn.foodLunchNoMeat            -0.2310   0.2548 -0.9065 #> Dscrmn.foodMeat                   -0.1464   0.2827 -0.5177 #> Dscrmn.foodOatMilk                -0.6750   0.3006 -2.2452 #> Dscrmn.foodTofu                   -0.0616   0.2535 -0.2428 #> Dscrmn.foodVegan                  -0.1414   0.2562 -0.5517 #> Dscrmn.homeClothesCold            -0.4019   0.2742 -1.4654 #> Dscrmn.homeClothesHang             0.0556   0.2561  0.2173 #> Dscrmn.homeLightsOff              -0.1129   0.2564 -0.4404 #> Dscrmn.packCarriedUtensils        12.8555  54.4996  0.2359 #> Dscrmn.packCompost                 0.1468   0.2624  0.5595 #> Dscrmn.packContainerToRestaurant   0.0245   0.2592  0.0947 #> Dscrmn.packPickedUpLitter         -0.0583   0.2488 -0.2341 #> Dscrmn.packPullRecycleFromTrash   -0.6919   0.3249 -2.1297 #> Dscrmn.packRags                   -0.0506   0.2535 -0.1996 #> Dscrmn.packReusableMug            -0.1240   0.2517 -0.4926 #> Dscrmn.packReusedPaperPlasticBags -0.5985   0.2918 -2.0506 #> Dscrmn.purchBuyNothing             0.2095   0.2648  0.7912 #> Dscrmn.socialDocumentary          -0.4678   0.2790 -1.6770 #> Dscrmn.socialGroup                 0.1203   0.2579  0.4664 #> Dscrmn.socialRead                 -0.5483   0.2832 -1.9362 #> Dscrmn.socialSupportive            0.2167   0.2694  0.8046 #> Dscrmn.waterShowerStop            -0.0819   0.2532 -0.3236 #> Dscrmn.waterTeethStop             -0.0466   0.2502 -0.1861 #>  #> Integration: #> method: Gauss-Hermite #> quadrature points: 21  #>  #> Optimization: #> Convergence: 0  #> max(|grad|): 0.0084  #> quasi-Newton: BFGS model_tpm <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_tpm' ) #> Warning in ltm::tpm(df, type = \"rasch\", max.guessing = 1): Hessian matrix at convergence is not positive definite; unstable solution. summary(model_tpm) #>  #> Call: #> ltm::tpm(data = df, type = \"rasch\", max.guessing = 1) #>  #> Model Summary: #>   log.Lik    AIC      BIC #>  -1618.75 3335.5 3463.154 #>  #> Coefficients: #>                                      value std.err  z.vals #> Gussng.foodLocal                    0.0928     NaN     NaN #> Gussng.foodLunchNoMeat              0.1055     NaN     NaN #> Gussng.foodMeat                     0.0499     NaN     NaN #> Gussng.foodOatMilk                  0.0760     NaN     NaN #> Gussng.foodTofu                     0.0672  1.1754  0.0572 #> Gussng.foodVegan                    0.0542  0.9039  0.0600 #> Gussng.homeClothesCold              0.0586     NaN     NaN #> Gussng.homeClothesHang              0.1348  0.4471  0.3014 #> Gussng.homeLightsOff                0.0715  1.7596  0.0407 #> Gussng.packCarriedUtensils          0.1156     NaN     NaN #> Gussng.packCompost                  0.1273  0.5623  0.2264 #> Gussng.packContainerToRestaurant    0.1332  0.7371  0.1807 #> Gussng.packPickedUpLitter           0.0967     NaN     NaN #> Gussng.packPullRecycleFromTrash     0.1436     NaN     NaN #> Gussng.packRags                     0.0802     NaN     NaN #> Gussng.packReusableMug              0.1211     NaN     NaN #> Gussng.packReusedPaperPlasticBags   0.0629     NaN     NaN #> Gussng.purchBuyNothing              0.1383  0.4829  0.2863 #> Gussng.socialDocumentary            0.1089     NaN     NaN #> Gussng.socialGroup                  0.1016     NaN     NaN #> Gussng.socialRead                   0.0880  0.9040  0.0973 #> Gussng.socialSupportive             0.1234     NaN     NaN #> Gussng.waterShowerStop              0.1135     NaN     NaN #> Gussng.waterTeethStop               0.0842  0.8981  0.0937 #> Dffclt.foodLocal                    5.6084     NaN     NaN #> Dffclt.foodLunchNoMeat              9.0830     NaN     NaN #> Dffclt.foodMeat                   -23.2593     NaN     NaN #> Dffclt.foodOatMilk                 -4.7730     NaN     NaN #> Dffclt.foodTofu                    -5.4310 60.2100 -0.0902 #> Dffclt.foodVegan                  -10.8194 30.5300 -0.3544 #> Dffclt.homeClothesCold            -11.5569     NaN     NaN #> Dffclt.homeClothesHang             26.3952     NaN     NaN #> Dffclt.homeLightsOff               -4.0096 94.8933 -0.0423 #> Dffclt.packCarriedUtensils         16.3230     NaN     NaN #> Dffclt.packCompost                 24.1189     NaN     NaN #> Dffclt.packContainerToRestaurant   23.3063 39.3952  0.5916 #> Dffclt.packPickedUpLitter           8.3503     NaN     NaN #> Dffclt.packPullRecycleFromTrash    31.1251     NaN     NaN #> Dffclt.packRags                    -3.4320     NaN     NaN #> Dffclt.packReusableMug             15.4645     NaN     NaN #> Dffclt.packReusedPaperPlasticBags  -9.0833     NaN     NaN #> Dffclt.purchBuyNothing             28.4568     NaN     NaN #> Dffclt.socialDocumentary           11.8613     NaN     NaN #> Dffclt.socialGroup                  6.3318     NaN     NaN #> Dffclt.socialRead                   7.5694 58.6144  0.1291 #> Dffclt.socialSupportive            19.6263     NaN     NaN #> Dffclt.waterShowerStop             12.2448     NaN     NaN #> Dffclt.waterTeethStop               3.7391 56.2121  0.0665 #> Dscrmn                              0.0370     NaN     NaN #>  #> Integration: #> method: Gauss-Hermite #> quadrature points: 21  #>  #> Optimization: #> Optimizer: optim (BFGS) #> Convergence: 0  #> max(|grad|): 3.2"},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/articles/rebl-scores-and-outputs.html","id":"get-rebl-scores","dir":"Articles","previous_headings":"","what":"Get REBL Scores","title":"REBL Scores and Outputs","text":"model happy , can get data frame REBL scores (θ\\theta): rebl_scores latent person ability parameter θ\\theta. also include person fit statistics.  TODO: Note symmetry function recognizes model type generates output df accordingly. Let’s try mml_uncon model: , Exp expected frequency response pattern, z1 person parameter (REBL score), se.z1 standard error. ltm varieties models result structure: TODO: interpret TODO: interpret","code":"rebl_items <- id_rebl_items(   df = example,    pattern = '^(?!res).*',    perl = TRUE )  model_cml <- get_rasch_model(   df = example,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'cml' )  rebl_scores <- get_rebl_scores(model = model_cml) head(rebl_scores) #>   id      rebl_cml #> 1 p1 -0.1714695574 #> 2 p2 -0.1714695574 #> 3 p3  0.0005654146 #> 4 p4  0.3469324887 #> 5 p5 -0.3458996795 #> 6 p6  0.7134383210 hist(   rebl_scores$rebl_cml,   main = 'Histogram of REBL Scores',   xlab = 'REBL Score',   ylab = 'Frequency' ) model_con <- get_rasch_model(   df = example,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_con' )  rebl_scores <- get_rebl_scores(   model = model_con,   df = example,   rebl_items = rebl_items ) rebl_scores %>%    dplyr::select(respondent_id, Exp:se.z1) %>%    head() #>   respondent_id          Exp          z1     se.z1 #> 1            p1 1.233281e-06  0.01879318 0.3845670 #> 2            p2 1.133194e-05  0.01879314 0.3845670 #> 3            p3 1.827986e-06  0.16614210 0.3834232 #> 4            p4 2.463664e-05  0.46130495 0.3859749 #> 5            p5 2.323019e-05 -0.13006566 0.3873551 #> 6            p6 1.804789e-06  0.76561442 0.3953806 model_2pl <- get_rasch_model(   df = example,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_tpm' ) rebl_scores <- get_rebl_scores(   model = model_2pl,   df = example,   rebl_items = rebl_items ) rebl_scores %>%    dplyr::select(respondent_id, z1:se.z1) %>%    head() #>   respondent_id          z1     se.z1 #> 1            p1 -0.02581175 0.9826781 #> 2            p2  0.02393432 0.9812392 #> 3            p3  0.05696231 0.9829088 #> 4            p4  0.27077841 0.9820741 #> 5            p5 -0.04679345 0.9806309 #> 6            p6  0.34543170 0.9853315 model_tpm <- get_rasch_model(   df = example,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_tpm' ) rebl_scores <- get_rebl_scores(   model = model_tpm,   df = example,   rebl_items = rebl_items ) rebl_scores %>%    dplyr::select(respondent_id, z1:se.z1) %>%    head() #>   respondent_id          z1     se.z1 #> 1            p1 -0.02581175 0.9826781 #> 2            p2  0.02393432 0.9812392 #> 3            p3  0.05696231 0.9829088 #> 4            p4  0.27077841 0.9820741 #> 5            p5 -0.04679345 0.9806309 #> 6            p6  0.34543170 0.9853315"},{"path":[]},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher Donovan. Author, maintainer. Trisha Shrum. Author.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Donovan C, Shrum T (2025). rebl: Measure Pro-Environmental Behavior. R package version 0.0.0.9002, https://github.com/ChrisDonovan307/rebl.","code":"@Manual{,   title = {rebl: Measure Pro-Environmental Behavior},   author = {Christopher Donovan and Trisha Shrum},   year = {2025},   note = {R package version 0.0.0.9002},   url = {https://github.com/ChrisDonovan307/rebl}, }"},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"rebl","dir":"","previous_headings":"","what":"Measure Pro-Environmental Behavior","title":"Measure Pro-Environmental Behavior","text":"Chris Donovan, Dr. Trisha Shrum September 21, 2025","code":""},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Measure Pro-Environmental Behavior","text":"repository Repeated Environmental Behavior Latent (REBL) Scale project. contains code build REBL scale raw data visualizations.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"installing-rebl","dir":"","previous_headings":"","what":"Installing REBL","title":"Measure Pro-Environmental Behavior","text":"install rebl package: See vignette example use package.","code":"if (!require('remotes')) install.packages('remotes') remotes::install_github('ChrisDonovan307/rebl')"},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"using-rebl","dir":"","previous_headings":"","what":"Using REBL","title":"Measure Pro-Environmental Behavior","text":"get REBL Scores, first identify REBL items character vector. already handy, can skip step. Next, select model run get model object. Finally, wrangle REBL Scores model. See vignettes details use REBL Score measure pro-environmental behavior using different model types well model validation.","code":"library(rebl)  rebl_items <- id_rebl_items(   df = example,    pattern = '^(?!res).*',    perl = TRUE )  model_cml <- get_rasch_model(   df = example,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'cml' )  rebl_scores <- get_rebl_scores(model = model_cml) head(rebl_scores)"},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"rebl-calculator","dir":"","previous_headings":"","what":"REBL Calculator","title":"Measure Pro-Environmental Behavior","text":"also REBL Score Calculator take dataset produce results might need . Note currently limited range applications, updated features broader use cases shortly.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"coming-soon","dir":"","previous_headings":"","what":"Coming Soon","title":"Measure Pro-Environmental Behavior","text":"Model validation: reliability invariance Model outputs GoF Test linking baseline","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example REBL Survey Data — example","title":"Example REBL Survey Data — example","text":"processed dataset containing simulated responses REBL survey 100 participants. dataset contains numeric (0/1) coded responses 24 REBL items measuring pro-environmental behaviors across four domains: food, home, packaging, social, water.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example REBL Survey Data — example","text":"","code":"example"},{"path":"https://chrisdonovan307.github.io/rebl/reference/example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example REBL Survey Data — example","text":"data frame 100 rows 25 variables: respondent_id Character. Unique participant identifier (p1-p100) foodLocal Numeric. Eating locally grown food (0=, 1=Yes) foodLunchNoMeat Numeric. Eating lunch without meat (0=, 1=Yes) foodMeat Numeric. Eating meat regularly (0=, 1=Yes) foodOatMilk Numeric. Drinking oat milk (0=, 1=Yes) foodTofu Numeric. Eating tofu (0=, 1=Yes) foodVegan Numeric. Following vegan diet (0=, 1=Yes) homeClothesCold Numeric. Washing clothes cold water (0=, 1=Yes) homeClothesHang Numeric. Hanging clothes dry (0=, 1=Yes) homeLightsOff Numeric. Turning lights leaving room (0=, 1=Yes) packCarriedUtensils Numeric. Carrying reusable utensils (0=, 1=Yes) packCompost Numeric. Composting organic waste (0=, 1=Yes) packContainerToRestaurant Numeric. Bringing container restaurant (0=, 1=Yes) packPickedUpLitter Numeric. Picking litter (0=, 1=Yes) packPullRecycleFromTrash Numeric. Pulling recyclables trash (0=, 1=Yes) packRags Numeric. Using rags instead paper towels (0=, 1=Yes) packReusableMug Numeric. Using reusable mug (0=, 1=Yes) packReusedPaperPlasticBags Numeric. Reusing paper/plastic bags (0=, 1=Yes) purchBuyNothing Numeric. Participating buy nothing groups (0=, 1=Yes) socialDocumentary Numeric. Watching environmental documentaries (0=, 1=Yes) socialGroup Numeric. Participating environmental groups (0=, 1=Yes) socialRead Numeric. Reading environmental issues (0=, 1=Yes) socialSupportive Numeric. supportive environmental causes (0=, 1=Yes) waterShowerStop Numeric. Stopping water showering (0=, 1=Yes) waterTeethStop Numeric. Stopping water brushing teeth (0=, 1=Yes)","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example REBL Survey Data — example","text":"dataset processed version raw_example, character responses (\"Yes\"/\"\") converted numeric values (1/0). data can used Rasch modeling psychometric analyses pro-environmental behavior patterns.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example REBL Survey Data — example","text":"","code":"# Load the data data(example)  # View structure str(example) #> 'data.frame':\t100 obs. of  25 variables: #>  $ respondent_id             : chr  \"p1\" \"p2\" \"p3\" \"p4\" ... #>  $ foodLocal                 : num  1 1 0 1 1 0 1 0 0 1 ... #>  $ foodLunchNoMeat           : num  0 0 1 1 1 0 0 0 1 0 ... #>  $ foodMeat                  : num  1 0 1 0 0 1 1 0 0 0 ... #>  $ foodOatMilk               : num  0 0 0 1 1 1 0 0 0 0 ... #>  $ foodTofu                  : num  0 0 1 1 1 1 1 1 0 0 ... #>  $ foodVegan                 : num  0 0 0 1 0 1 0 0 1 0 ... #>  $ homeClothesCold           : num  1 1 1 1 1 1 1 0 1 1 ... #>  $ homeClothesHang           : num  1 0 0 0 1 1 0 0 0 0 ... #>  $ homeLightsOff             : num  0 0 1 1 1 1 1 1 1 1 ... #>  $ packCarriedUtensils       : num  0 0 0 1 0 1 0 0 0 0 ... #>  $ packCompost               : num  1 0 1 0 0 0 0 1 0 0 ... #>  $ packContainerToRestaurant : num  0 1 1 0 0 1 1 0 1 1 ... #>  $ packPickedUpLitter        : num  1 1 1 1 0 0 1 0 0 1 ... #>  $ packPullRecycleFromTrash  : num  1 1 0 0 0 1 1 1 1 0 ... #>  $ packRags                  : num  0 1 1 1 1 1 1 1 1 1 ... #>  $ packReusableMug           : num  0 1 0 0 0 0 1 0 0 0 ... #>  $ packReusedPaperPlasticBags: num  0 1 0 1 1 0 1 0 1 1 ... #>  $ purchBuyNothing           : num  0 0 1 0 0 1 0 0 1 1 ... #>  $ socialDocumentary         : num  1 0 0 0 0 1 0 0 1 1 ... #>  $ socialGroup               : num  1 1 1 1 0 1 0 0 0 1 ... #>  $ socialRead                : num  1 0 0 0 1 1 1 1 1 1 ... #>  $ socialSupportive          : num  0 0 1 1 0 0 1 1 1 0 ... #>  $ waterShowerStop           : num  0 1 0 0 0 1 0 0 1 0 ... #>  $ waterTeethStop            : num  1 1 0 1 0 0 0 1 0 0 ...  # Summary of pro-environmental behavior frequencies colSums(example[, -1])  # Exclude respondent_id column #>                  foodLocal            foodLunchNoMeat  #>                         50                         52  #>                   foodMeat                foodOatMilk  #>                         28                         42  #>                   foodTofu                  foodVegan  #>                         42                         38  #>            homeClothesCold            homeClothesHang  #>                         63                         37  #>              homeLightsOff        packCarriedUtensils  #>                         57                         43  #>                packCompost  packContainerToRestaurant  #>                         38                         39  #>         packPickedUpLitter   packPullRecycleFromTrash  #>                         48                         35  #>                   packRags            packReusableMug  #>                         57                         44  #> packReusedPaperPlasticBags            purchBuyNothing  #>                         61                         36  #>          socialDocumentary                socialGroup  #>                         46                         50  #>                 socialRead           socialSupportive  #>                         48                         41  #>            waterShowerStop             waterTeethStop  #>                         46                         51"},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix lumped ltm scores — fix_lumped_ltm_scores","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"Resolves issue ltm model returns fewer observations input data due response patterns collapsed groups. words, multiple people exact response pattern output provides single person parameter pattern, rather person. function maps model scores back original participant observations using unique response pattern identifiers.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"","code":"fix_lumped_ltm_scores(df, scores, rebl_items)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"df data frame containing original response data participant IDs scores list object returned ltm::factor.scores() containing score.dat rebl_items Character vector column names representing REBL items","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"data frame participant IDs, REBL scores ordered original row position","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_item_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Item Fit Statistics — get_item_fits","title":"Get Item Fit Statistics — get_item_fits","text":"Returns data frame item fit statistics, difficulty parameters, proportion pro-environmental responses REBL item eRm Rasch model. Item fit statistics help assess well individual items conform Rasch model expectations.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_item_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Item Fit Statistics — get_item_fits","text":"","code":"get_item_fits(model, df, rebl_items)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_item_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Item Fit Statistics — get_item_fits","text":"model fitted eRm Rasch model object (class \"eRm\") df data frame containing survey data REBL items rebl_items character vector column names corresponding REBL items df","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_item_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Item Fit Statistics — get_item_fits","text":"data frame containing: rebl_item Character. REBL item names prop_peb Numeric. Proportion pro-environmental responses (0-1) .fit Numeric. Infit statistics eRm::itemfit() .outfitMSQ Numeric. Outfit mean square statistics eta Numeric. Item difficulty parameters eta_se Numeric. Standard errors difficulty parameters","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_item_fits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Item Fit Statistics — get_item_fits","text":"","code":"if (FALSE) { # \\dontrun{   # Create sample REBL data   df <- data.frame(     id = 1:100,     rebl_1 = sample(0:1, 100, replace = TRUE),     rebl_2 = sample(0:1, 100, replace = TRUE),     rebl_3 = sample(0:1, 100, replace = TRUE)   )   rebl_items <- c(\"rebl_1\", \"rebl_2\", \"rebl_3\")    # Fit Rasch model   model <- get_rasch_model(df, \"id\", rebl_items, type = \"cml\")    # Get item fit statistics   item_fits <- get_item_fits(model, df, rebl_items)   print(item_fits) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Person Fits — get_person_fits","title":"Get Person Fits — get_person_fits","text":"Extract person fit statistics fitted psychometric models. Person fit statistics assess well individual's response pattern conforms model expectations. Works eRm ltm model objects.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Person Fits — get_person_fits","text":"","code":"get_person_fits(model)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Person Fits — get_person_fits","text":"model fitted psychometric model object either eRm (Rasch models) ltm package (rasch, ltm, tpm models)","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Person Fits — get_person_fits","text":"data frame containing person fit statistics participant IDs. eRm models: includes outfit, infit statistics eRm::personfit(). ltm models: includes L0, Lz test statistics p-values ltm::person.fit().","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Person Fits — get_person_fits","text":"","code":"if (FALSE) { # \\dontrun{   # With eRm model   model_erm <- get_rasch_model(df, \"id\", rebl_items)   fits_erm <- get_person_fits(model_erm)    # With ltm model   model_ltm <- ltm::rasch(df[rebl_items])   fits_ltm <- get_person_fits(model_ltm) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Rasch Model — get_rasch_model","title":"Get Rasch Model — get_rasch_model","text":"Fit Rasch model REBL items using eRm package. creates Rasch model object can used calculate person parameters (REBL scores) item parameters.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Rasch Model — get_rasch_model","text":"","code":"get_rasch_model(   df,   id,   rebl_items,   type = c(\"cml\", \"mml_constrained\", \"mml_con\", \"mml_unconstrained\", \"mml_uncon\", \"2pl\",     \"tpm\") )"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Rasch Model — get_rasch_model","text":"df dataframe containing REBL items participant IDs id character string specifying column name containing participant IDs rebl_items character vector REBL item column names include model. Get id_rebl_items() handy. type string. cml = conditional maximum likelihood, mml_con = constrained maximum marginal likelihood, mml_uncon = unconstrained maximum marginal likelihoood, tpl = two parameter logistic model, tpm = three parameter logistic model. See details info.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Rasch Model — get_rasch_model","text":"eRm Rasch model object can passed functions like get_rebl_scores()","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Rasch Model — get_rasch_model","text":"Add details means.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Rasch Model — get_rasch_model","text":"","code":"if (FALSE) { # \\dontrun{   # Get REBL items   rebl_items <- id_rebl_items(raw_example, '^(?!res).*')    # Fit Rasch model   model <- get_rasch_model(raw_example, \"id\", rebl_items) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get REBL Scores — get_rebl_scores","title":"Get REBL Scores — get_rebl_scores","text":"Extract person parameters (REBL scores) fitted Rasch model. Optionally includes person fit statistics assess well person's response pattern fits Rasch model.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get REBL Scores — get_rebl_scores","text":"","code":"get_rebl_scores(model, df = NULL, rebl_items = NULL)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get REBL Scores — get_rebl_scores","text":"model fitted eRm Rasch model object get_rasch_model() df data.frame containing REBL items unique id rebl_items character vector REBL item names","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get REBL Scores — get_rebl_scores","text":"dataframe participant IDs, REBL scores, optionally person fit statistics. include_fits TRUE, includes columns outfit, infit, fit measures eRm::personfit()","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get REBL Scores — get_rebl_scores","text":"","code":"if (FALSE) { # \\dontrun{   # Fit model and get scores   model <- get_rasch_model(df, \"id\", rebl_items)   scores <- get_rebl_scores(model, include_fits = TRUE)    # Get scores without fit statistics   scores_only <- get_rebl_scores(model, include_fits = FALSE) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify REBL Items — id_rebl_items","title":"Identify REBL Items — id_rebl_items","text":"Create vector REBL items data frame using regex matching pattern.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify REBL Items — id_rebl_items","text":"","code":"id_rebl_items(df, pattern, ...)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify REBL Items — id_rebl_items","text":"df data frame containing REBL items pattern regex matching pattern ... Additional arguments passed grepl()","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify REBL Items — id_rebl_items","text":"character vector names REBL items.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify REBL Items — id_rebl_items","text":"convenience function, essential workflow. already vector REBL item names, works just well. Using function might easier harder depending items named. something like rebl_* work quite well. Otherwise, like example, might use \"\" operators represent . vector REBL items required later workflow, however choose get .","code":""},{"path":[]},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Reversed REBL Items — id_reversed_rebl_items","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"Filter vector REBL items identify need reverse coding using regex matching pattern.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"","code":"id_reversed_rebl_items(rebl_items, pattern, ...)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"rebl_items character vector REBL item names pattern regex matching pattern identify items need reverse coding ... Additional arguments passed grepl()","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"character vector REBL item names need reverse coding.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"convenience function identifying REBL items need reverse coding based pattern. example, items need reverse coding \"reverse\" \"neg\" names, can use pattern identify . function filters provided vector REBL items return matching pattern.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"","code":"if (FALSE) { # \\dontrun{   # First get all REBL items   rebl_items <- id_rebl_items(example, '^rebl_')      # Then identify which ones need reverse coding   reversed_items <- id_reversed_rebl_items(rebl_items, 'reverse')   reversed_items <- id_reversed_rebl_items(rebl_items, '_neg$')   reversed_items <- id_reversed_rebl_items(rebl_items, 'item[135]$') } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/raw_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw REBL Survey Data — raw_example","title":"Raw REBL Survey Data — raw_example","text":"unprocessed dataset containing simulated responses REBL survey 100 participants. dataset contains character responses (\"Yes\"/\"\") 24 REBL items measuring pro-environmental behaviors across four domains: food, home, packaging, social, water.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/raw_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw REBL Survey Data — raw_example","text":"","code":"raw_example"},{"path":"https://chrisdonovan307.github.io/rebl/reference/raw_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw REBL Survey Data — raw_example","text":"data frame 100 rows 25 variables: respondent_id Character. Unique participant identifier (p1-p100) foodLocal Character. Eating locally grown food (\"Yes\"/\"\") foodLunchNoMeat Character. Eating lunch without meat (\"Yes\"/\"\") foodMeat Character. Eating meat regularly (\"Yes\"/\"\") foodOatMilk Character. Drinking oat milk (\"Yes\"/\"\") foodTofu Character. Eating tofu (\"Yes\"/\"\") foodVegan Character. Following vegan diet (\"Yes\"/\"\") homeClothesCold Character. Washing clothes cold water (\"Yes\"/\"\") homeClothesHang Character. Hanging clothes dry (\"Yes\"/\"\") homeLightsOff Character. Turning lights leaving room (\"Yes\"/\"\") packCarriedUtensils Character. Carrying reusable utensils (\"Yes\"/\"\") packCompost Character. Composting organic waste (\"Yes\"/\"\") packContainerToRestaurant Character. Bringing container restaurant (\"Yes\"/\"\") packPickedUpLitter Character. Picking litter (\"Yes\"/\"\") packPullRecycleFromTrash Character. Pulling recyclables trash (\"Yes\"/\"\") packRags Character. Using rags instead paper towels (\"Yes\"/\"\") packReusableMug Character. Using reusable mug (\"Yes\"/\"\") packReusedPaperPlasticBags Character. Reusing paper/plastic bags (\"Yes\"/\"\") purchBuyNothing Character. Participating buy nothing groups (\"Yes\"/\"\") socialDocumentary Character. Watching environmental documentaries (\"Yes\"/\"\") socialGroup Character. Participating environmental groups (\"Yes\"/\"\") socialRead Character. Reading environmental issues (\"Yes\"/\"\") socialSupportive Character. supportive environmental causes (\"Yes\"/\"\") waterShowerStop Character. Stopping water showering (\"Yes\"/\"\") waterTeethStop Character. Stopping water brushing teeth (\"Yes\"/\"\")","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/raw_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw REBL Survey Data — raw_example","text":"dataset contains original character-coded responses REBL survey processing. represents participants actually responded survey item. data can processed using functions like recode_rebl convert numeric format analysis.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/raw_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw REBL Survey Data — raw_example","text":"","code":"# Load the data data(raw_example)  # View structure str(raw_example) #> 'data.frame':\t100 obs. of  25 variables: #>  $ respondent_id             : chr  \"p1\" \"p2\" \"p3\" \"p4\" ... #>  $ foodLocal                 : chr  \"Yes\" \"Yes\" \"No\" \"Yes\" ... #>  $ foodLunchNoMeat           : chr  \"No\" \"No\" \"Yes\" \"Yes\" ... #>  $ foodMeat                  : chr  \"Yes\" \"No\" \"Yes\" \"No\" ... #>  $ foodOatMilk               : chr  \"No\" \"No\" \"No\" \"Yes\" ... #>  $ foodTofu                  : chr  \"No\" \"No\" \"Yes\" \"Yes\" ... #>  $ foodVegan                 : chr  \"No\" \"No\" \"No\" \"Yes\" ... #>  $ homeClothesCold           : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ homeClothesHang           : chr  \"Yes\" \"No\" \"No\" \"No\" ... #>  $ homeLightsOff             : chr  \"No\" \"No\" \"Yes\" \"Yes\" ... #>  $ packCarriedUtensils       : chr  \"No\" \"No\" \"No\" \"Yes\" ... #>  $ packCompost               : chr  \"Yes\" \"No\" \"Yes\" \"No\" ... #>  $ packContainerToRestaurant : chr  \"No\" \"Yes\" \"Yes\" \"No\" ... #>  $ packPickedUpLitter        : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ packPullRecycleFromTrash  : chr  \"Yes\" \"Yes\" \"No\" \"No\" ... #>  $ packRags                  : chr  \"No\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ packReusableMug           : chr  \"No\" \"Yes\" \"No\" \"No\" ... #>  $ packReusedPaperPlasticBags: chr  \"No\" \"Yes\" \"No\" \"Yes\" ... #>  $ purchBuyNothing           : chr  \"No\" \"No\" \"Yes\" \"No\" ... #>  $ socialDocumentary         : chr  \"Yes\" \"No\" \"No\" \"No\" ... #>  $ socialGroup               : chr  \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ socialRead                : chr  \"Yes\" \"No\" \"No\" \"No\" ... #>  $ socialSupportive          : chr  \"No\" \"No\" \"Yes\" \"Yes\" ... #>  $ waterShowerStop           : chr  \"No\" \"Yes\" \"No\" \"No\" ... #>  $ waterTeethStop            : chr  \"Yes\" \"Yes\" \"No\" \"Yes\" ...  # Count \"Yes\" responses for each item sapply(raw_example[, -1], function(x) sum(x == \"Yes\")) #>                  foodLocal            foodLunchNoMeat  #>                         50                         52  #>                   foodMeat                foodOatMilk  #>                         28                         42  #>                   foodTofu                  foodVegan  #>                         42                         38  #>            homeClothesCold            homeClothesHang  #>                         63                         37  #>              homeLightsOff        packCarriedUtensils  #>                         57                         43  #>                packCompost  packContainerToRestaurant  #>                         38                         39  #>         packPickedUpLitter   packPullRecycleFromTrash  #>                         48                         35  #>                   packRags            packReusableMug  #>                         57                         44  #> packReusedPaperPlasticBags            purchBuyNothing  #>                         61                         36  #>          socialDocumentary                socialGroup  #>                         46                         50  #>                 socialRead           socialSupportive  #>                         48                         41  #>            waterShowerStop             waterTeethStop  #>                         46                         51   # Convert to numeric format # processed_data <- recode_rebl(raw_example)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode REBL Items — recode_rebl","title":"Recode REBL Items — recode_rebl","text":"Recode REBL items Yes/1/0. deal reverse coding. See reverse_code_rebl_items() .","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode REBL Items — recode_rebl","text":"","code":"recode_rebl(df, rebl_items)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode REBL Items — recode_rebl","text":"df dataframe includes REBL items rebl_items character vector REBL items. can use id_rebl_items() get .","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode REBL Items — recode_rebl","text":"dataframe \"Yes\" \"\" coded 1 0 factors based one PEB","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode REBL Items — recode_rebl","text":"show warning REBL items provided appear data frame.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode REBL Items — recode_rebl","text":"","code":"if (FALSE) { # \\dontrun{   rebl_items <- id_rebl_items(raw_example, '^(?!res).*')   df <- recode_rebl(raw_example, rebl_items) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Code REBL Items — reverse_code_rebl_items","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"Reverse code specified REBL items flipping 1s 0s 0s 1s. typically done items \"\" represents pro-environmental behavior rather \"Yes\".","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"","code":"reverse_code_rebl_items(df, reversed_items)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"df dataframe containing REBL items reverse coded reversed_items character vector REBL item names need reverse coded","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"dataframe specified items reverse coded (1s become 0s, 0s become 1s, NAs remain NA)","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"","code":"if (FALSE) { # \\dontrun{   # Identify items that need reverse coding   reversed_items <- id_reversed_rebl_items(rebl_items, \"pattern\")   df_reversed <- reverse_code_rebl_items(df, reversed_items) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/news/index.html","id":"rebl-development-version","dir":"Changelog","previous_headings":"","what":"rebl (development version)","title":"rebl (development version)","text":"Initial CRAN submission.","code":""}]
