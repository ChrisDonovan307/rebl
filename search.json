[{"path":"https://chrisdonovan307.github.io/rebl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rebl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/articles/getting-rebl-scores.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting REBL Scores","text":"Something REBL PEBs Rasch models. Install load rebl package friends:","code":"# pacman::p_load_current_gh('tshrum/rebl') devtools::load_all() #> ℹ Loading rebl pacman::p_load(   dplyr,    ggplot2,   ltm,   eRm )"},{"path":"https://chrisdonovan307.github.io/rebl/articles/getting-rebl-scores.html","id":"recoding","dir":"Articles","previous_headings":"","what":"Recoding","title":"Getting REBL Scores","text":"Take look randomly generated data example: respondent_id column 24 REBL items data frame. mighty convenient character vector REBL items. already , grand. Otherwise, let’s tell rebl items . can regex pattern. , just identifying column start “res”. items start “rebl”, regex pattern ^rebl*. Next, event data REBL items yes/format, convert 1/0: Now recode reverse-coded REBL items. items /0 pro-environmental behavior. start making vector items regex pattern. use example items start “food”. (silly confusing though - change ). recode items. Reverse code new vector items:","code":"head(raw_example[, 1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1       Yes              No      Yes          No       No #> 2            p2       Yes              No       No          No       No #> 3            p3        No             Yes      Yes          No      Yes #> 4            p4       Yes             Yes       No         Yes      Yes #> 5            p5       Yes             Yes       No         Yes      Yes #> 6            p6        No              No      Yes         Yes      Yes rebl_items <- id_rebl_items(   df = raw_example,    pattern = '^(?!res).*',    perl = TRUE ) print(rebl_items[1:6]) #> [1] \"foodLocal\"       \"foodLunchNoMeat\" \"foodMeat\"        \"foodOatMilk\"     #> [5] \"foodTofu\"        \"foodVegan\" df <- recode_rebl(   df = raw_example,    rebl_items = rebl_items ) head(raw_example[, 1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1       Yes              No      Yes          No       No #> 2            p2       Yes              No       No          No       No #> 3            p3        No             Yes      Yes          No      Yes #> 4            p4       Yes             Yes       No         Yes      Yes #> 5            p5       Yes             Yes       No         Yes      Yes #> 6            p6        No              No      Yes         Yes      Yes reversed_items <- id_reversed_rebl_items(rebl_items, '^food') head(reversed_items) #> [1] \"foodLocal\"       \"foodLunchNoMeat\" \"foodMeat\"        \"foodOatMilk\"     #> [5] \"foodTofu\"        \"foodVegan\" df <- reverse_code_rebl_items(df, reversed_items) head(df[,1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1         0               1        0           1        1 #> 2            p2         0               1        1           1        1 #> 3            p3         1               0        0           1        0 #> 4            p4         0               0        1           0        0 #> 5            p5         0               0        1           0        0 #> 6            p6         1               1        0           0        0"},{"path":"https://chrisdonovan307.github.io/rebl/articles/getting-rebl-scores.html","id":"rasch-modeling","dir":"Articles","previous_headings":"","what":"Rasch Modeling","title":"Getting REBL Scores","text":"Now ’re ready run Rasch model get REBL scores. Rasch model dichotomous items eRm package (Mair, Wien, Hatzinger 2007) estimates probability PP person vv endorse item ii : P(Xvi=1)=exp(θv−βi)1+exp(θv−βi),  P(X_{vi}=1)=\\frac{exp(\\theta_v-\\beta_i)}{1+exp(\\theta_v-\\beta_i)}, θ\\theta latent parameter person ability (REBL score) β\\beta latent parameter item difficulty. calculate θ\\theta just give function data frame, name column respondent id, vector REBL items: , coefficients represent item difficulty parameters. Note discrimination every item set 1. can also run set Marginal Maximum Likelihood (MML) models using ltm package (Rizopoulos 2006). Parameters estimated maximizing log-likelihoods observed data. model implemented ltm parameterizing mmth sample unit : ℓm(θ)=log∫p(xm|zm;θ)p(zm)dzm, \\ell_{m} (\\theta)=\\log\\int p(x_{m}|z_{m};\\theta)p(z_{m})dz_{m}, function observed response vectors xmx_m, rank respondent latent trait values zmz_m, distribution person abilities dzmdz_m. First try constrained Rasch model, item discriminations constrained equal 1: can also run MML unconstrained, item discriminations set equal can vary one: two parameter logistic model estimates item difficulty discrimination: Finally, can use three parameter logistic model also estimates latent variable guessing:","code":"model_cml <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'cml' ) model_con <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_con' ) summary(model_con) #>  #> Call: #> ltm::rasch(data = df, constraint = cbind(length(df) + 1, 1)) #>  #> Model Summary: #>    log.Lik      AIC      BIC #>  -1677.112 3402.225 3464.749 #>  #> Coefficients: #>                                     value std.err  z.vals #> Dffclt.foodLocal                  -0.0004  0.2286 -0.0015 #> Dffclt.foodLunchNoMeat             0.0845  0.2287  0.3693 #> Dffclt.foodMeat                   -1.0011  0.2490 -4.0200 #> Dffclt.foodOatMilk                -0.3430  0.2309 -1.4856 #> Dffclt.foodTofu                   -0.3433  0.2309 -1.4866 #> Dffclt.foodVegan                  -0.5203  0.2340 -2.2239 #> Dffclt.homeClothesCold            -0.5656  0.2350 -2.4070 #> Dffclt.homeClothesHang             0.5646  0.2349  2.4033 #> Dffclt.homeLightsOff              -0.2999  0.2304 -1.3019 #> Dffclt.packCarriedUtensils         0.2992  0.2303  1.2989 #> Dffclt.packCompost                 0.5195  0.2339  2.2206 #> Dffclt.packContainerToRestaurant   0.4741  0.2330  2.0345 #> Dffclt.packPickedUpLitter          0.0847  0.2287  0.3705 #> Dffclt.packPullRecycleFromTrash    0.6567  0.2372  2.7684 #> Dffclt.packRags                   -0.2999  0.2304 -1.3019 #> Dffclt.packReusableMug             0.2558  0.2299  1.1128 #> Dffclt.packReusedPaperPlasticBags -0.4756  0.2331 -2.0407 #> Dffclt.purchBuyNothing             0.6111  0.2360  2.5890 #> Dffclt.socialDocumentary           0.1703  0.2291  0.7434 #> Dffclt.socialGroup                -0.0001  0.2286 -0.0003 #> Dffclt.socialRead                  0.0848  0.2287  0.3707 #> Dffclt.socialSupportive            0.3861  0.2315  1.6676 #> Dffclt.waterShowerStop             0.1696  0.2291  0.7403 #> Dffclt.waterTeethStop             -0.0430  0.2286 -0.1880 #> Dscrmn                             1.0000      NA      NA #>  #> Integration: #> method: Gauss-Hermite #> quadrature points: 21  #>  #> Optimization: #> Convergence: 0  #> max(|grad|): 0.015  #> quasi-Newton: BFGS model_uncon <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_uncon' ) model_2pl <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_2pl' ) model_tpm <- get_rasch_model(   df = df,    id = 'respondent_id',    rebl_items = rebl_items,   type = 'mml_tpm' )"},{"path":"https://chrisdonovan307.github.io/rebl/articles/getting-rebl-scores.html","id":"model-fit","dir":"Articles","previous_headings":"","what":"Model Fit","title":"Getting REBL Scores","text":"Add model fit, model comparisons. PI maps . ICC plots.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/articles/getting-rebl-scores.html","id":"get-rebl-scores","dir":"Articles","previous_headings":"","what":"Get REBL Scores","title":"Getting REBL Scores","text":"model, can get data frame REBL scores (θ\\theta) well person fit statistics: rebl_scores latent person ability parameter θ\\theta. also include person fit statistics. function recognizes model type generates output df accordingly. Let’s try mml_uncon model: , Exp expected frequency response pattern, z1 person parameter (REBL score), se.z1 standard error. ltm varieties models result structure:","code":"rebl_scores <- get_rebl_scores(   model = model_cml ) head(rebl_scores) #>   id     rebl_cml #> 1 p1  0.175297475 #> 2 p2  0.531270583 #> 3 p3  0.002033018 #> 4 p4 -0.347109451 #> 5 p5 -0.716822270 #> 6 p6  0.350852534 rebl_scores <- get_rebl_scores(   model = model_con,   df = df,   rebl_items = rebl_items ) head(rebl_scores[, 1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1         0               1        0           1        1 #> 2            p2         0               1        1           1        1 #> 3            p3         1               0        0           1        0 #> 4            p4         0               0        1           0        0 #> 5            p5         0               0        1           0        0 #> 6            p6         1               1        0           0        0 rebl_scores <- get_rebl_scores(   model = model_2pl,   df = df,   rebl_items = rebl_items ) head(rebl_scores[, 1:6]) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1         0               1        0           1        1 #> 2            p2         0               1        1           1        1 #> 3            p3         1               0        0           1        0 #> 4            p4         0               0        1           0        0 #> 5            p5         0               0        1           0        0 #> 6            p6         1               1        0           0        0 rebl_scores <- get_rebl_scores(   model = model_tpm,   df = df,   rebl_items = rebl_items ) head(rebl_scores) #>   respondent_id foodLocal foodLunchNoMeat foodMeat foodOatMilk foodTofu #> 1            p1         0               1        0           1        1 #> 2            p2         0               1        1           1        1 #> 3            p3         1               0        0           1        0 #> 4            p4         0               0        1           0        0 #> 5            p5         0               0        1           0        0 #> 6            p6         1               1        0           0        0 #>   foodVegan homeClothesCold homeClothesHang homeLightsOff packCarriedUtensils #> 1         1               1               1             0                   0 #> 2         1               1               0             0                   0 #> 3         1               1               0             1                   0 #> 4         0               1               0             1                   1 #> 5         1               1               1             1                   0 #> 6         0               1               1             1                   1 #>   packCompost packContainerToRestaurant packPickedUpLitter #> 1           1                         0                  1 #> 2           0                         1                  1 #> 3           1                         1                  1 #> 4           0                         0                  1 #> 5           0                         0                  0 #> 6           0                         1                  0 #>   packPullRecycleFromTrash packRags packReusableMug packReusedPaperPlasticBags #> 1                        1        0               0                          0 #> 2                        1        1               1                          1 #> 3                        0        1               0                          0 #> 4                        0        1               0                          1 #> 5                        0        1               0                          1 #> 6                        1        1               0                          0 #>   purchBuyNothing socialDocumentary socialGroup socialRead socialSupportive #> 1               0                 1           1          1                0 #> 2               0                 0           1          0                0 #> 3               1                 0           1          0                1 #> 4               0                 0           1          0                1 #> 5               0                 0           0          1                0 #> 6               1                 1           1          1                0 #>   waterShowerStop waterTeethStop Exp            z1     se.z1 #> 1               0              1   0  0.0311773532 0.9971615 #> 2               1              1   0  0.1066395159 0.9971500 #> 3               0              0   0 -0.0004552723 0.9970868 #> 4               0              1   0 -0.0507498192 0.9967747 #> 5               0              0   0 -0.1134358215 0.9965940 #> 6               1              0   0  0.0500545767 0.9974068"},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/articles/getting-rebl-scores.html","id":"person-fit","dir":"Articles","previous_headings":"Fits","what":"Person FIt","title":"Getting REBL Scores","text":"eRm model: ltm models: , L0L_0 Levine Rubin (1979) test statistic, LzL_z standardized version (Drasgow et al., 1985), pp test person fit null hypothesis good fit.","code":"person_fits <- get_person_fits(model_cml) head(person_fits) #>   id    p.fit p.df p.outfitMSQ p.infitMSQ  p.outfitZ   p.infitZ #> 1 p1 26.34022   24   1.0975091  1.0775665  1.0808962  0.9490868 #> 2 p2 21.01128   24   0.8754699  0.9015251 -0.8765145 -0.7873568 #> 3 p3 25.67393   24   1.0697470  1.0578461  0.8643480  0.7632975 #> 4 p4 21.53673   24   0.8973637  0.9085237 -0.9356910 -0.8876603 #> 5 p5 20.06458   24   0.8360243  0.8495138 -0.9381076 -0.9502299 #> 6 p6 29.78258   24   1.2409409  1.1983320  2.0499674  1.9269102 person_fits <- get_person_fits(model_2pl) head(person_fits) #>    id        L0          Lz         p #> 1 p84 -16.11623 -0.43126653 0.3331373 #> 2 p97 -15.34446  0.17028805 0.5676082 #> 3 p67 -15.80549 -0.19723333 0.4218225 #> 4 p16 -13.32541  1.13052439 0.8708723 #> 5 p75 -15.70159  0.02653039 0.5105829 #> 6 p36 -14.57193  0.61962256 0.7322468"},{"path":[]},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher Donovan. Author, maintainer. Trisha Shrum. Author.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Donovan C, Shrum T (2025). rebl: Measure Pro-Environmental Behavior. R package version 0.0.0.9001, https://github.com/ChrisDonovan307/rebl.","code":"@Manual{,   title = {rebl: Measure Pro-Environmental Behavior},   author = {Christopher Donovan and Trisha Shrum},   year = {2025},   note = {R package version 0.0.0.9001},   url = {https://github.com/ChrisDonovan307/rebl}, }"},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"rebl","dir":"","previous_headings":"","what":"Measure Pro-Environmental Behavior","title":"Measure Pro-Environmental Behavior","text":"Dr. Trisha Shrum, Chris Donovan September 20, 2025","code":""},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Measure Pro-Environmental Behavior","text":"repository Repeated Environmental Behavior Latent (REBL) Scale project. contains code build REBL scale raw data visualizations.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"installation","dir":"","previous_headings":"REBL Package","what":"Installation","title":"Measure Pro-Environmental Behavior","text":"install rebl package:","code":"if (!require('remotes')) install.packages('remotes') remotes::install_github('tshrum/rebl')"},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"usage","dir":"","previous_headings":"REBL Package","what":"Usage","title":"Measure Pro-Environmental Behavior","text":"See vignette example use package.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/index.html","id":"rebl-calculator","dir":"","previous_headings":"","what":"REBL Calculator","title":"Measure Pro-Environmental Behavior","text":"also REBL Score Calculator take dataset produce results might need . Note currently limited range applications, updated features broader use cases shortly.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix lumped ltm scores — fix_lumped_ltm_scores","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"Resolves issue ltm model returns fewer observations input data due response patterns collapsed groups. words, multiple people exact response pattern output provides single person parameter pattern, rather person. function maps model scores back original participant observations using unique response pattern identifiers.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"","code":"fix_lumped_ltm_scores(df, scores, rebl_items)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"df data frame containing original response data participant IDs scores list object returned ltm::factor.scores() containing score.dat rebl_items Character vector column names representing REBL items","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/fix_lumped_ltm_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix lumped ltm scores — fix_lumped_ltm_scores","text":"data frame participant IDs, REBL scores ordered original row position","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Person Fits — get_person_fits","title":"Get Person Fits — get_person_fits","text":"Extract person fit statistics fitted psychometric models. Person fit statistics assess well individual's response pattern conforms model expectations. Works eRm ltm model objects.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Person Fits — get_person_fits","text":"","code":"get_person_fits(model)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Person Fits — get_person_fits","text":"model fitted psychometric model object either eRm (Rasch models) ltm package (rasch, ltm, tpm models)","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Person Fits — get_person_fits","text":"data frame containing person fit statistics participant IDs. eRm models: includes outfit, infit statistics eRm::personfit(). ltm models: includes L0, Lz test statistics p-values ltm::person.fit().","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_person_fits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Person Fits — get_person_fits","text":"","code":"if (FALSE) { # \\dontrun{   # With eRm model   model_erm <- get_rasch_model(df, \"id\", rebl_items)   fits_erm <- get_person_fits(model_erm)    # With ltm model   model_ltm <- ltm::rasch(df[rebl_items])   fits_ltm <- get_person_fits(model_ltm) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Rasch Model — get_rasch_model","title":"Get Rasch Model — get_rasch_model","text":"Fit Rasch model REBL items using eRm package. creates Rasch model object can used calculate person parameters (REBL scores) item parameters.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Rasch Model — get_rasch_model","text":"","code":"get_rasch_model(   df,   id,   rebl_items,   type = c(\"cml\", \"mml_constrained\", \"mml_con\", \"mml_unconstrained\", \"mml_uncon\", \"2pl\",     \"tpm\") )"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Rasch Model — get_rasch_model","text":"df dataframe containing REBL items participant IDs id character string specifying column name containing participant IDs rebl_items character vector REBL item column names include model. Get id_rebl_items() handy. type string. cml = conditional maximum likelihood, mml_con = constrained maximum marginal likelihood, mml_uncon = unconstrained maximum marginal likelihoood, tpl = two parameter logistic model, tpm = three parameter logistic model. See details info.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Rasch Model — get_rasch_model","text":"eRm Rasch model object can passed functions like get_rebl_scores()","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Rasch Model — get_rasch_model","text":"Add details means.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rasch_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Rasch Model — get_rasch_model","text":"","code":"if (FALSE) { # \\dontrun{   # Get REBL items   rebl_items <- id_rebl_items(raw_example, '^(?!res).*')    # Fit Rasch model   model <- get_rasch_model(raw_example, \"id\", rebl_items) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get REBL Scores — get_rebl_scores","title":"Get REBL Scores — get_rebl_scores","text":"Extract person parameters (REBL scores) fitted Rasch model. Optionally includes person fit statistics assess well person's response pattern fits Rasch model.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get REBL Scores — get_rebl_scores","text":"","code":"get_rebl_scores(model, df = NULL, rebl_items = NULL)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get REBL Scores — get_rebl_scores","text":"model fitted eRm Rasch model object get_rasch_model() include_fits Logical indicating whether include person fit statistics output (default: TRUE)","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get REBL Scores — get_rebl_scores","text":"dataframe participant IDs, REBL scores, optionally person fit statistics. include_fits TRUE, includes columns outfit, infit, fit measures eRm::personfit()","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/get_rebl_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get REBL Scores — get_rebl_scores","text":"","code":"if (FALSE) { # \\dontrun{   # Fit model and get scores   model <- get_rasch_model(df, \"id\", rebl_items)   scores <- get_rebl_scores(model, include_fits = TRUE)    # Get scores without fit statistics   scores_only <- get_rebl_scores(model, include_fits = FALSE) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify REBL Items — id_rebl_items","title":"Identify REBL Items — id_rebl_items","text":"Create vector REBL items data frame using regex matching pattern.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify REBL Items — id_rebl_items","text":"","code":"id_rebl_items(df, pattern, ...)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify REBL Items — id_rebl_items","text":"df data frame containing REBL items pattern regex matching pattern ... Additional arguments passed grepl()","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify REBL Items — id_rebl_items","text":"character vector names REBL items.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_rebl_items.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify REBL Items — id_rebl_items","text":"convenience function, essential workflow. already vector REBL item names, works just well. Using function might easier harder depending items named. something like rebl_* work quite well. Otherwise, like example, might use \"\" operators represent . vector REBL items required later workflow, however choose get .","code":""},{"path":[]},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Reversed REBL Items — id_reversed_rebl_items","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"Filter vector REBL items identify need reverse coding using regex matching pattern.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"","code":"id_reversed_rebl_items(rebl_items, pattern, ...)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"rebl_items character vector REBL item names pattern regex matching pattern identify items need reverse coding ... Additional arguments passed grepl()","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"character vector REBL item names need reverse coding.","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"convenience function identifying REBL items need reverse coding based pattern. example, items need reverse coding \"reverse\" \"neg\" names, can use pattern identify . function filters provided vector REBL items return matching pattern.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/id_reversed_rebl_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Reversed REBL Items — id_reversed_rebl_items","text":"","code":"if (FALSE) { # \\dontrun{   # First get all REBL items   rebl_items <- id_rebl_items(example, '^rebl_')      # Then identify which ones need reverse coding   reversed_items <- id_reversed_rebl_items(rebl_items, 'reverse')   reversed_items <- id_reversed_rebl_items(rebl_items, '_neg$')   reversed_items <- id_reversed_rebl_items(rebl_items, 'item[135]$') } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode REBL Items — recode_rebl","title":"Recode REBL Items — recode_rebl","text":"Recode REBL items Yes/1/0. deal reverse coding. See reverse_code_rebl_items() .","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode REBL Items — recode_rebl","text":"","code":"recode_rebl(df, rebl_items)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode REBL Items — recode_rebl","text":"df dataframe includes REBL items rebl_items character vector REBL items. can use id_rebl_items() get .","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode REBL Items — recode_rebl","text":"dataframe \"Yes\" \"\" coded 1 0 factors based one PEB","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode REBL Items — recode_rebl","text":"show warning REBL items provided appear data frame.","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/recode_rebl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode REBL Items — recode_rebl","text":"","code":"if (FALSE) { # \\dontrun{   rebl_items <- id_rebl_items(raw_example, '^(?!res).*')   df <- recode_rebl(raw_example, rebl_items) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Code REBL Items — reverse_code_rebl_items","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"Reverse code specified REBL items flipping 1s 0s 0s 1s. typically done items \"\" represents pro-environmental behavior rather \"Yes\".","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"","code":"reverse_code_rebl_items(df, reversed_items)"},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"df dataframe containing REBL items reverse coded reversed_items character vector REBL item names need reverse coded","code":""},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"dataframe specified items reverse coded (1s become 0s, 0s become 1s, NAs remain NA)","code":""},{"path":[]},{"path":"https://chrisdonovan307.github.io/rebl/reference/reverse_code_rebl_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Code REBL Items — reverse_code_rebl_items","text":"","code":"if (FALSE) { # \\dontrun{   # Identify items that need reverse coding   reversed_items <- id_reversed_rebl_items(rebl_items, \"pattern\")   df_reversed <- reverse_code_rebl_items(df, reversed_items) } # }"},{"path":"https://chrisdonovan307.github.io/rebl/news/index.html","id":"rebl-development-version","dir":"Changelog","previous_headings":"","what":"rebl (development version)","title":"rebl (development version)","text":"Initial CRAN submission.","code":""}]
